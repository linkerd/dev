#!/usr/bin/env bash

# Ensure the all github workflows and actions reference the same devcontainer
# version as that in .devcontainer.json.

set -euo pipefail

IMAGE=$(j5j .devcontainer/devcontainer.json |jq -r '.image')

check_image() {
    if [ "$1" != "$IMAGE" ]; then
        # Report all line numbers with the unexpected image.
        while IFS= read -r n ; do
            if [ "${GITHUB_ACTIONS:-}" = "true" ]; then
                echo "::error file=${2},line=${n}::Expected image '${IMAGE}'; found '${1}'">&2
            else
                echo "${2}:${n}: Expected image '${IMAGE}'; found '${1}'" >&2
            fi
        done < <(grep -nF "$1" "$2" | cut -d: -f1)
        return 1
    fi
}

EX=0

# Check workflows for devcontainer images
if [ -d .github/workflows ]; then
    for f in .github/workflows/* ; do
        # Find all container images that look like our dev image, dropping the
        # `-suffix` from the tag.
        for i in $(yq '.jobs.* | .container | select(.) | (.image // .) | match("ghcr.io/linkerd/dev:v[0-9]+").string' < "$f") ; do
            if ! check_image "$i" "$f" ; then
                EX=$((EX+1))
                break
            fi
        done
    done
fi

# Check actions for devcontainer images
if [ -d .github/actions ]; then
    while IFS= read -r f ; do
        while IFS= read -r i ; do
            if ! check_image "$i" "$f" ; then
                EX=$((EX+1))
                break
            fi
        done < <(awk 'toupper($1) ~ "FROM" { print $2 }' "$f" \
                    | sed -Ene 's,(ghcr\.io/linkerd/dev:v[0-9]+).*,\1,p')
    done < <(find .github/actions -name Dockerfile\*)
fi

exit $EX
