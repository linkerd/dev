#!/usr/bin/env -S just --working-directory . --justfile

# The command used to reinvoke just
_just := just_executable() + " --working-directory . --justfile " + justfile()

# Helpers for running Cargo.

profile := 'debug' # or 'release'
_release := if profile == 'release' { '--release' } else { '' }

toolchain := ""
export CARGO := env_var_or_default("CARGO", "cargo" + if toolchain != "" { " +" + toolchain } else { "" })

target := ''
_target := if target == '' {
        ''
    } else {
        '--target=' + target
    }

export RUSTFLAGS := env_var_or_default("RUSTFLAGS", "-D warnings") + if target == 'aarch64-unknown-linux-musl' {
        ' --codegen linker=aarch64-linux-gnu-gcc'
    } else if target == 'armv7-unknown-linux-musleabihf' {
        ' --codegen linker=arm-linux-gnueabihf-gcc'
    } else { '' }

_llvm-version := '11'
_clang := 'clang-' + _llvm-version
_strip := 'llvm-strip-' + _llvm-version
_ar := 'llvm-ar-' + _llvm-version

# Use LLD to statically link binaries (when building for musl).
_rustflags-self-contained := "-Clink-self-contained=yes -Clinker=rust-lld -Clink-arg=-fuse-ld=lld -Clink-arg=-Wl,--no-rosegment"

# linux/arm64 + gnu
export AR_aarch64_unknown_linux_gnu := _ar
export CC_aarch64_unknown_linux_gnu := _clang
export CFLAGS_aarch64_unknown_linux_gnu := '--sysroot=/usr/aarch64-linux-gnu'
export STRIP_aarch64_unknown_linux_gnu := _strip

# linux/arm64 + musl
export AR_aarch64_unknown_linux_musl := _ar
export CC_aarch64_unknown_linux_musl := _clang
export CFLAGS_aarch64_unknown_linux_musl := '--sysroot=/usr/aarch64-linux-gnu'
export STRIP_aarch64_unknown_linux_musl := _strip
export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_RUSTFLAGS := _rustflags-self-contained

# linux/arm/v7 + gnueabihf
export AR_arm_unknown_linux_gnueabihf := _ar
export CC_aarch64_unknown_linux_gnueabihf := _clang
export CFLAGS_aarch64_unknown_linux_gnueabihf := '--sysroot=/usr/arm-linux-gnueabihf'
export STRIP_aarch64_unknown_linux_gnueabihf := _strip

# linux/arm/v7 + musl
export AR_armv7_unknown_linux_musleabihf := _ar
export CC_armv7_unknown_linux_musleabihf := _clang
export CFLAGS_armv7_unknown_linux_musleabihf := '--sysroot=/usr/arm-linux-gnueabihf'
export STRIP_armv7_unknown_linux_musleabihf := _strip
export CARGO_TARGET_ARMV7_UNKNOWN_LINUX_MUSLEABIHF_RUSTFLAGS := _rustflags-self-contained

# linux/amd64 + gnu
export AR_x86_64_unknown_linux_gnu := _ar
export CC_x86_64_unknown_linux_gnu := _clang
export STRIP_x86_64_unknown_linux_gnu := _strip

# linux/amd64 + musl
export AR_x86_64_unknown_linux_musl := _ar
export CC_x86_64_unknown_linux_musl := _clang
export STRIP_x86_64_unknown_linux_musl := _strip
export CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_RUSTFLAGS := _rustflags-self-contained

all: fetch clippy test

fetch *args='':
    {{ CARGO }} fetch {{ args }}

clean:
    {{ CARGO }} clean

build *args: _target-installed
    {{ CARGO }} build {{ _release }} {{ _target }} {{ args }} {{ _fmt }}

fmt *args='':
    {{ CARGO }} fmt {{ args }}

check *args='': _target-installed
    {{ CARGO }} check {{ _release }} {{ _target }} {{ args }} {{ _fmt }}

clippy *args='': _target-installed
    {{ CARGO }} clippy {{ _release }} {{ _target }} {{ args }} {{ _fmt }}

doc *args='':
    {{ CARGO }} doc {{ _release }} {{ _target }} {{ args }} {{ _fmt }}

test-build *args='': _target-installed
    {{ CARGO }} test --no-run {{ _release }} {{ _target }} {{ args }} {{ _fmt }}

test *args='': _target-installed
    {{ CARGO }} nextest run {{ _release }} {{ _target }} {{ args }}

# Print the version of the named crate. E.g. `version = "1.2.3"` as "v1.2.3"
crate-version crate:
    @{{ CARGO }} metadata --format-version=1 \
        | jq -r '.packages[] | select(.name == "{{ crate }}") | "v" + .version' \
        | head -n1

_target-installed:
    #!/usr/bin/env bash
    set -euo pipefail
    if ! rustup target list --installed |grep -qF '{{ target }}' 2>/dev/null ; then
        {{ _just }} target='{{ target }}' _target-add
    fi

_target-add:
    rustup target add '{{ target }}'

# If we're running in Github Actions and cargo-action-fmt is installed, then add
# a command suffix that formats errors.
_fmt := ```
    if [ "${GITHUB_ACTIONS:-}" = "true" ] &&
        command -v cargo-action-fmt >/dev/null 2>&1
    then
        echo "--message-format=json | cargo-action-fmt"
    fi
```
