#!/usr/bin/env -S just --working-directory . --justfile

# Settings used in bash recipes
_bash-setup := "set -euo pipefail"

# The command used to reinvoke just
_just := just_executable() + " --working-directory . --justfile " + justfile()

# The name of the k3d cluster to use.
export K3D_CLUSTER_NAME := env_var_or_default("K3D_CLUSTER_NAME", "l5d")

# The name of the docker network to use (i.e., for multicluster testing).
export K3D_NETWORK_NAME := env_var_or_default("K3D_NETWORK_NAME", K3D_CLUSTER_NAME)

# The kubernetes version to use for the cluster. e.g. 'v1.24', 'latest', etc.
export K8S_VERSION := env_var_or_default("K8S_VERSION", "latest")

# The number of worker nodes to create in the cluster.
export K3D_AGENTS := env_var_or_default("K3D_AGENTS", "0")

# The number of server nodes to create in the cluster.
export K3D_SERVERS := env_var_or_default("K3D_SERVERS", "1")

export K3S_DISABLE := env_var_or_default("K3S_DISABLE", "")
export K3D_CREATE_FLAGS := env_var_or_default("K3D_CREATE_FLAGS", "")

_kubectl := "kubectl --context=k3d-" + K3D_CLUSTER_NAME

# Print the cluster's detailed status.
info:
    k3d cluster list {{ K3D_CLUSTER_NAME }} -o yaml | yq '.[]'

# Run kubectl with the cluster context.
kubectl *args:
    {{ _kubectl }} {{ args }}

alias k := kubectl

# Create a k3d cluster.
create: _create && _ready

# Create a cluster without waiting for it to be ready.
_create:
    k3d cluster create '{{ K3D_CLUSTER_NAME }}' \
        --image='+{{ K8S_VERSION }}' \
        --agents='{{ K3D_AGENTS }}' \
        --servers='{{ K3D_SERVERS }}' \
        --network='{{ K3D_NETWORK_NAME }}' \
        {{ if K3S_DISABLE != '' { '--k3s-arg=--disable=' + K3S_DISABLE } else { '' } }} \
        --kubeconfig-update-default \
        --kubeconfig-switch-context=false \
        {{ K3D_CREATE_FLAGS }}

# Delete the cluster.
delete:
    k3d cluster delete {{ K3D_CLUSTER_NAME }}

# Set the default kubectl context to the cluster.
use:
    k3d kubeconfig merge '{{ K3D_CLUSTER_NAME }}' \
        --kubeconfig-merge-default \
        --kubeconfig-switch-context=true \
        >/dev/null

# Ensure that there's a ready cluster, creating one if necessary.
ready: && _ready
    #!/usr/bin/env bash
    {{ _bash-setup }}
    if ! k3d cluster list '{{ K3D_CLUSTER_NAME }}' >/dev/null 2>&1; then
        {{ _just }} _create
    fi
    k3d kubeconfig merge '{{ K3D_CLUSTER_NAME }}' \
        --kubeconfig-merge-default \
        --kubeconfig-switch-context=false \
        >/dev/null

_ready: _api-ready _dns-ready

# Wait for the cluster's API server to be accessible
_api-ready:
    #!/usr/bin/env bash
    {{ _bash-setup }}
    for i in {1..6} ; do
        if {{ _kubectl }} cluster-info >/dev/null ; then exit 0 ; fi
        sleep 10
    done
    exit 1

# Wait for the cluster's DNS pods to be ready.
_dns-ready:
    while [ $({{ _kubectl }} get po -n kube-system -l k8s-app=kube-dns -o json |jq '.items | length') = "0" ]; do sleep 1 ; done
    {{ _kubectl }} wait pod --for=condition=ready \
        --namespace=kube-system --selector=k8s-app=kube-dns \
        --timeout=1m

# Import the provided images into the cluster.
import *images:
    #!/usr/bin/env bash
    {{ _bash-setup }}
    for i in {1..3} ; do
        if {{ _just }} _k3d-load {{ images }} ; then exit ; else sleep 1 ; fi
    done

_k3d-load *images:
    k3d image import --mode=direct --cluster='{{ K3D_CLUSTER_NAME }}' {{ images }}
